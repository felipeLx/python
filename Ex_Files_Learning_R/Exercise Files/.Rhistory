# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Using the diamonds dataset from ggplot2
?diamonds  # Get information about the diamonds dataset
diamonds   # Display the beginning of the dataset
?hist
# Histogram with defaults
hist(diamonds$price)
# Histogram with options
hist(diamonds$price,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
ylab   = "Frequency",
xlab   = "Price of Diamonds",
border = NA,  # No borders on bars
col    = "#CD0000"  # red3
)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Using the diamonds dataset from ggplot2
?diamonds  # Get information about the diamonds dataset
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Using the diamonds dataset from ggplot2
?diamonds  # Get information about the diamonds dataset
diamonds   # Display the beginning of the dataset
?hist
# Histogram with defaults
hist(diamonds$price)
# Histogram with options
hist(diamonds$price,
breaks = 7,  # Suggest number of breaks
main   = "Histogram of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
ylab   = "Frequency",
xlab   = "Price of Diamonds",
border = NA,  # No borders on bars
col    = "#CD0000"  # red3
)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Boxplot with defaults
boxplot(diamonds$price)
# Similar process using pipes
diamonds %>%
select(price) %>%
boxplot()
# Boxplot with options
diamonds %>%
select(price) %>%
boxplot(
horizontal = T,  # Horizontal
notch  = T,      # Confidence interval for median
main   = "Boxplot of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
xlab   = "Price of Diamonds",
col    = "#CD0000"  # red3
)
# Boxplots by group using plot()
diamonds %>%
select(color, price) %>%
plot()
# Boxplots by group using boxplot()
diamonds %>%
select(color, price) %>%
boxplot(
price ~ color,  # Tilde indicates formula
data  = . ,     # Dot is placeholder for pipe
col   = "#CD0000"
)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Using the diamonds dataset from ggplot2
?diamonds  # Get information about the diamonds dataset
diamonds   # Display the beginning of the dataset
?plot     # Get info on "Generic X-Y Plotting
?boxplot  # Get info on the "Bar Plots" function
# Boxplot with defaults
boxplot(diamonds$price)
# Similar process using pipes
diamonds %>%
select(price) %>%
boxplot()
# Boxplot with options
diamonds %>%
select(price) %>%
boxplot(
horizontal = T,  # Horizontal
notch  = T,      # Confidence interval for median
main   = "Boxplot of Price of Diamonds",
sub    = "(Source: ggplot2::diamonds)",
xlab   = "Price of Diamonds",
col    = "#CD0000"  # red3
)
# Boxplots by group using plot()
diamonds %>%
select(color, price) %>%
plot()
# Boxplots by group using boxplot()
diamonds %>%
select(color, price) %>%
boxplot(
price ~ color,  # Tilde indicates formula
data  = . ,     # Dot is placeholder for pipe
col   = "#CD0000"
)
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
df %>%
select(instagram:modernDance) %>%
plot()  # Plot all associations
# Bivariate scatterplot with defaults
df %>%
select(scrapbook:modernDance) %>%
plot()
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "Scatterplot of Google Searches by State",
xlab = "Searches for \"scrapbook\"",
ylab = "Searches for \"modern dance\"",
col  = "gray",  # Color of points
pch  = 20,      # "Plotting character" (small circle)
)
?pch  # See plotting characters
# Add fit linear regression line (y ~ x)
df %>%
lm(modernDance ~ scrapbook, data = .) %>%
abline()
# Identify outlier
df %>%
select(state_code, scrapbook) %>%
filter(scrapbook > 4) %>%  # Select outlier
print()
# Bivariate scatterplot without outlier
df %>%
select(scrapbook:modernDance) %>%
filter(scrapbook < 4) %>%  # filter out outlier
plot(
main = "Scatterplot of Google Searches by State",
xlab = "Searches for \"scrapbook\"",
ylab = "Searches for \"modern dance\"",
col  = "gray",  # Color of points
pch  = 20,      # "Plotting character" (small circle)
)
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%  # filter out outlier
lm(modernDance ~ scrapbook, data = .) %>%
abline()
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
print()
df %>%
select(instagram:modernDance) %>%
plot()  # Plot all associations
# Bivariate scatterplot with defaults
df %>%
select(scrapbook:modernDance) %>%
plot()
# Bivariate scatterplot with options
df %>%
select(scrapbook:modernDance) %>%
plot(
main = "Scatterplot of Google Searches by State",
xlab = "Searches for \"scrapbook\"",
ylab = "Searches for \"modern dance\"",
col  = "gray",  # Color of points
pch  = 20,      # "Plotting character" (small circle)
)
?pch  # See plotting characters
# Add fit linear regression line (y ~ x)
df %>%
lm(modernDance ~ scrapbook, data = .) %>%
abline()
# Identify outlier
df %>%
select(state_code, scrapbook) %>%
filter(scrapbook > 4) %>%  # Select outlier
print()
# Bivariate scatterplot without outlier
df %>%
select(scrapbook:modernDance) %>%
filter(scrapbook < 4) %>%  # filter out outlier
plot(
main = "Scatterplot of Google Searches by State",
xlab = "Searches for \"scrapbook\"",
ylab = "Searches for \"modern dance\"",
col  = "gray",  # Color of points
pch  = 20,      # "Plotting character" (small circle)
)
# Add fit line without outlier
df %>%
filter(scrapbook < 4) %>%  # filter out outlier
lm(modernDance ~ scrapbook, data = .) %>%
abline()
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Load base packages manually
library(datasets)  # For example datasets
# uspop
?uspop  # Get info about data
uspop   # Display data
?ts  # Get info about time-series objects
# Plot with default plot()
plot(uspop)
# Plot with options
uspop %>%
plot(
main = "US Population 1790–1970 ",
sub  = "(Source: datasets::uspop)",
xlab = "Year",
ylab = "Population (in millions)",
)
abline(v = 1930, col = "lightgray")
text(1930, 10, "1930", col = "red3")
abline(v = 1940, col = "lightgray")
text(1940, 2, "1940", col = "red3")
# Plot with ts.plot()
?ts.plot
# Although this can be used for a single time series, plot
# is easier to use and is preferred.
ts.plot(uspop)
# Plot with plot.ts()
# More powerful alternative
?plot.ts
plot.ts(uspop)
# EuStockMarkets
?EuStockMarkets
EuStockMarkets
# Three different plot functions
plot(EuStockMarkets)     # Stacked windows
plot.ts(EuStockMarkets)  # Identical
ts.plot(EuStockMarkets)  # One window
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, tidyverse)
# Load base packages manually
library(datasets)  # For example datasets
# uspop
?uspop  # Get info about data
uspop   # Display data
# Plot with default plot()
plot(uspop)
# Plot with options
uspop %>%
plot(
main = "US Population 1790–1970 ",
sub  = "(Source: datasets::uspop)",
xlab = "Year",
ylab = "Population (in millions)",
)
abline(v = 1930, col = "lightgray")
text(1930, 10, "1930", col = "red3")
abline(v = 1940, col = "lightgray")
text(1940, 2, "1940", col = "red3")
# Plot with ts.plot()
?ts.plot
# Although this can be used for a single time series, plot
# is easier to use and is preferred.
ts.plot(uspop)
# Plot with plot.ts()
# More powerful alternative
?plot.ts
plot.ts(uspop)
# EuStockMarkets
?EuStockMarkets
EuStockMarkets
# Three different plot functions
plot(EuStockMarkets)     # Stacked windows
plot.ts(EuStockMarkets)  # Identical
ts.plot(EuStockMarkets)  # One window
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
detach("package:datasets", unload = TRUE)  # For base
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
rename(y = psychRegions) %>%
print()
# Calculate clusters
hc <- df %>%  # Get data
dist %>%    # Compute distance/dissimilarity matrix
hclust      # Compute hierarchical clusters
# Plot dendrogram
hc %>% plot(labels = df$state_code)
# Draw boxes around clusters
hc %>% rect.hclust(k = 2, border = "gray80")  # 2 boxes
hc %>% rect.hclust(k = 3, border = "gray60")  # 3 boxes
hc %>% rect.hclust(k = 4, border = "gray40")  # 4 boxes
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
# pacman must already be installed; then load contributed
# packages (including pacman) with pacman
pacman::p_load(pacman, rio, tidyverse)
df <- import("data/StateData.xlsx") %>%
as_tibble() %>%
select(state_code,
psychRegions,
instagram:modernDance) %>%
mutate(psychRegions = as.factor(psychRegions)) %>%
rename(y = psychRegions) %>%
print()
# Calculate clusters
hc <- df %>%  # Get data
dist %>%    # Compute distance/dissimilarity matrix
hclust      # Compute hierarchical clusters
# Plot dendrogram
hc %>% plot(labels = df$state_code)
# Draw boxes around clusters
hc %>% rect.hclust(k = 2, border = "gray80")  # 2 boxes
hc %>% rect.hclust(k = 3, border = "gray60")  # 3 boxes
hc %>% rect.hclust(k = 4, border = "gray40")  # 4 boxes
# Clear environment
rm(list = ls())
# Clear packages
p_unload(all)  # Remove all add-ons
# Clear plots
dev.off()  # But only if there IS a plot
# Clear console
cat("\014")  # ctrl+L
